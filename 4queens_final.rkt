#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 61 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
23 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
43 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
          0 1854 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 184
(
 #"#reader(lib \"htdp-intermediate-reader.ss\" \"lang\")((modname 4quee"
 #"ns_final) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #("
 #"#t constructor repeating-decimal #f #t none #f ())))"
) 0 0 4 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"racket/list"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 7        1111 54           0 0           0 184 0 23 3 1 #" "
0 0 14 3 7 #"Header:"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 5 #"Final"
0 0 23 3 1 #" "
0 0 14 3 4 #"Peer"
0 0 23 3 1 #" "
0 0 14 3 10 #"Assessment"
0 0 23 3 1 #" "
0 0 14 3 7 #"Project"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 12 #"Introduction"
0 0 23 3 1 #" "
0 0 14 3 2 #"to"
0 0 23 3 1 #" "
0 0 14 3 10 #"Systematic"
0 0 23 3 1 #" "
0 0 14 3 7 #"Program"
0 0 23 3 1 #" "
0 0 14 3 6 #"Design"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 6 #"Queens"
0 0 23 3 1 #" "
0 0 14 3 6 #"Puzzle"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 2 #"To"
0 0 23 3 1 #" "
0 0 14 3 4 #"run:"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 4 #"Call"
0 0 23 3 2 #" ("
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 2 #") "
0 0 14 3 5 #"where"
0 0 23 3 1 #" "
0 0 14 3 1 #"X"
0 0 23 3 1 #" "
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 3 #"BD1"
0 0 27 3 1 #","
0 0 14 3 3 #"BD2"
0 0 27 3 1 #","
0 0 14 3 3 #"..."
0 0 27 3 1 #","
0 0 14 3 5 #"BD10."
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 12 #"Explanation:"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 3 #"The"
0 0 23 3 1 #" "
0 0 14 3 4 #"four"
0 0 23 3 1 #" "
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 14 3 7 #"problem"
0 0 23 3 1 #" "
0 0 14 3 8 #"consists"
0 0 23 3 1 #" "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 14 3 7 #"finding"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 3 #"way"
0 0 23 3 1 #" "
0 0 14 3 2 #"to"
0 0 23 3 1 #" "
0 0 14 3 5 #"place"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 4 #"four"
0 0 23 3 1 #" "
0 0 14 3 5 #"chess"
0 0 23 3 1 #" "
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 14 3 2 #"on"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 2 #"by"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 5 #"chess"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 5 #"while"
0 0 23 3 1 #" "
0 0 14 3 6 #"making"
0 0 23 3 1 #" "
0 0 14 3 4 #"sure"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 4 #"that"
0 0 23 3 1 #" "
0 0 14 3 4 #"none"
0 0 23 3 1 #" "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 14 3 3 #"the"
0 0 23 3 1 #" "
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 14 3 6 #"attack"
0 0 23 3 1 #" "
0 0 14 3 4 #"each"
0 0 23 3 1 #" "
0 0 14 3 6 #"other."
0 0 23 3 1 #" "
0 0 14 3 3 #"The"
0 0 23 3 1 #" "
0 0 14 3 4 #"four"
0 0 23 3 1 #" "
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 6 #"puzzle"
0 0 23 3 1 #" "
0 0 14 3 2 #"is"
0 0 23 3 1 #" "
0 0 14 3 3 #"one"
0 0 23 3 1 #" "
0 0 14 3 7 #"version"
0 0 23 3 1 #" "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 14 3 3 #"the"
0 0 23 3 1 #" "
0 0 14 3 4 #"more"
0 0 23 3 1 #" "
0 0 14 3 7 #"general"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 14 3 7 #"problem"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 14 3 7 #"placing"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 14 3 2 #"on"
0 0 23 3 1 #" "
0 0 14 3 2 #"an"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 2 #"by"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 14 3 6 #"board."
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0           0 0 0 23 29 1 #"\n"
0 7        1243 54           0 0           0 206 0 23 3 2 #"  "
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 3 #"few"
0 0 23 3 1 #" "
0 0 14 3 6 #"points"
0 0 23 3 1 #" "
0 0 14 3 5 #"about"
0 0 23 3 1 #" "
0 0 14 3 3 #"the"
0 0 23 3 1 #" "
0 0 14 3 8 #"problem:"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 3 #"The"
0 0 23 3 1 #" "
0 0 14 3 5 #"BOARD"
0 0 23 3 1 #" "
0 0 14 3 8 #"consists"
0 0 23 3 1 #" "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 20 3 2 #"16"
0 0 23 3 1 #" "
0 0 14 3 10 #"individual"
0 0 23 3 1 #" "
0 0 14 3 7 #"SQUARES"
0 0 23 3 1 #" "
0 0 14 3 8 #"arranged"
0 0 23 3 1 #" "
0 0 14 3 2 #"in"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 4 #"rows"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 8 #"columns."
0 0 23 3 1 #" "
0 0 14 3 3 #"The"
0 0 23 3 1 #" "
0 0 14 3 6 #"colour"
0 0 23 3 1 #" "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 14 3 3 #"the"
0 0 23 3 1 #" "
0 0 14 3 7 #"squares"
0 0 23 3 1 #" "
0 0 14 3 4 #"does"
0 0 23 3 1 #" "
0 0 14 3 3 #"not"
0 0 23 3 1 #" "
0 0 14 3 7 #"matter."
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"   "
0 0 14 3 4 #"Each"
0 0 23 3 1 #" "
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 3 #"can"
0 0 23 3 1 #" "
0 0 14 3 6 #"either"
0 0 23 3 1 #" "
0 0 14 3 2 #"be"
0 0 23 3 1 #" "
0 0 14 3 5 #"empty"
0 0 23 3 1 #" "
0 0 14 3 2 #"or"
0 0 23 3 1 #" "
0 0 14 3 3 #"can"
0 0 23 3 1 #" "
0 0 14 3 7 #"contain"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 6 #"queen."
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 8 #"POSITION"
0 0 23 3 1 #" "
0 0 14 3 2 #"on"
0 0 23 3 1 #" "
0 0 14 3 3 #"the"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 6 #"refers"
0 0 23 3 1 #" "
0 0 14 3 2 #"to"
0 0 23 3 1 #" "
0 0 14 3 1 #"a"
0 0 23 3 1 #" "
0 0 14 3 8 #"specific"
0 0 23 3 1 #" "
0 0 14 3 7 #"square."
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 5 #"queen"
0 0 23 3 1 #" "
0 0 14 3 7 #"ATTACKS"
0 0 23 3 1 #" "
0 0 14 3 5 #"every"
0 0 23 3 1 #" "
0 0 14 3 6 #"square"
0 0 23 3 1 #" "
0 0 14 3 2 #"in"
0 0 23 3 1 #" "
0 0 14 3 3 #"its"
0 0 23 3 1 #" "
0 0 14 3 3 #"row"
0 0 27 3 1 #","
0 0 23 3 1 #" "
0 0 14 3 3 #"its"
0 0 23 3 1 #" "
0 0 14 3 6 #"column"
0 0 27 3 1 #","
0 0 23 3 1 #" "
0 0 14 3 3 #"and"
0 0 23 3 1 #" "
0 0 14 3 4 #"both"
0 0 23 3 1 #" "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 14 3 3 #"its"
0 0 23 3 1 #" "
0 0 14 3 10 #"diagonals."
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 2 #"is"
0 0 23 3 1 #" "
0 0 14 3 5 #"VALID"
0 0 23 3 1 #" "
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 4 #"none"
0 0 23 3 1 #" "
0 0 14 3 2 #"of"
0 0 23 3 1 #" "
0 0 14 3 3 #"the"
0 0 23 3 1 #" "
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 14 3 6 #"placed"
0 0 23 3 1 #" "
0 0 14 3 2 #"on"
0 0 23 3 1 #" "
0 0 14 3 2 #"it"
0 0 23 3 1 #" "
0 0 14 3 6 #"attack"
0 0 23 3 1 #" "
0 0 14 3 4 #"each"
0 0 23 3 1 #" "
0 0 14 3 6 #"other."
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"A"
0 0 23 3 1 #" "
0 0 14 3 5 #"valid"
0 0 23 3 1 #" "
0 0 14 3 5 #"board"
0 0 23 3 1 #" "
0 0 14 3 2 #"is"
0 0 23 3 1 #" "
0 0 14 3 6 #"SOLVED"
0 0 23 3 1 #" "
0 0 14 3 2 #"if"
0 0 23 3 1 #" "
0 0 14 3 2 #"it"
0 0 23 3 1 #" "
0 0 14 3 8 #"contains"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 14 3 7 #"queens."
0 0 23 29 1 #"\n"
0 0 23 3 1 #" "
0           0 0 0 23 29 1 #"\n"
0 0 17 3 61
#";; Board is (listof Number) [-1,1] that is 16 elements long  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; Pos is Natural[0,15]  "
0 0 23 29 1 #"\n"
0 0 17 3 14 #";; interp. the"
0 0 17 3 1 #" "
0 0 17 3 8 #"position"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 6 #"square"
0 0 17 3 1 #" "
0 0 17 3 2 #"on"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 5 #"board"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 5 #"given"
0 0 17 3 1 #" "
0 0 17 3 1 #"p"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 6 #"then  "
0 0 23 29 1 #"\n"
0 0 17 3 35 #";;  -- the row  is (quotient p 4)  "
0 0 23 29 1 #"\n"
0 0 17 3 38 #";;  -- the column is (remainder p 4)  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; To run this code , call (queens X) where X = BD1,BD2,...,BD10.  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; Convert 0-based row and column to Pos  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"r-c->pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 14 3 1 #"c"
0 0 23 3 2 #")("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"r"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 3 #" ) "
0 0 14 3 1 #"c"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 5 #")    "
0 0 17 3 53 #";E stands for empty (permanent can not change to Q)  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 5 #")    "
0 0 17 3 20 #";Q stands for true  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 5 #")    "
0 0 17 3 48 #";B stands for not checked yet (can be E or Q)   "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD1"
0 0 23 3 3 #"   "
0 0 17 3 13 #"; not valid  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD2"
0 0 23 3 3 #"   "
0 0 17 3 13 #"; not valid  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD3"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 17 3 13 #"; not valid  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD4"
0 0 23 3 3 #"   "
0 0 17 3 13 #"; not valid  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD5"
0 0 23 3 3 #"   "
0 0 17 3 41 #"; valid (one of the possible solutions)  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 3 #"   "
0 0 17 3 36 #"; valid and can produce a solution  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD7"
0 0 23 3 3 #"   "
0 0 17 3 36 #"; valid and can produce a solution  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD8"
0 0 23 3 3 #"   "
0 0 17 3 40 #"; valid BUT can NOT produce a solution  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD9"
0 0 23 3 4 #"    "
0 0 17 3 35 #";valid and can produce a solution  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"E"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"BD10"
0 0 23 3 3 #"   "
0 0 17 3 35 #";valid and can produce a solution  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 1 #" "
0 0 14 3 1 #"B"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #"  "
0 0 20 3 1 #"0"
0 0 23 3 2 #"  "
0 0 20 3 1 #"1"
0 0 23 3 2 #"  "
0 0 20 3 1 #"2"
0 0 23 3 2 #"  "
0 0 20 3 1 #"3"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 2 #"  "
0 0 20 3 1 #"4"
0 0 23 3 2 #"  "
0 0 20 3 1 #"5"
0 0 23 3 2 #"  "
0 0 20 3 1 #"6"
0 0 23 3 2 #"  "
0 0 20 3 1 #"7"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 2 #"  "
0 0 20 3 1 #"8"
0 0 23 3 2 #"  "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 5 #")))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"COLS"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"  "
0 0 20 3 1 #"4"
0 0 23 3 2 #"  "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"  "
0 0 20 3 1 #"5"
0 0 23 3 2 #"  "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"  "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 2 #"  "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 5 #")))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"DIAG"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #"  "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"15"
0 0 23 3 3 #")  "
0 0 17 3 39 #";all top left to bottom right diagonals"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"  "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"  "
0 0 20 3 1 #"7"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"  "
0 0 20 3 1 #"9"
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 2 #"  "
0 0 20 3 1 #"9"
0 0 23 3 2 #"  "
0 0 20 3 1 #"6"
0 0 23 3 2 #"  "
0 0 20 3 1 #"3"
0 0 23 3 3 #")  "
0 0 17 3 39 #";all bottom left to top right diagonals"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 2 #"  "
0 0 20 3 1 #"8"
0 0 23 3 2 #"  "
0 0 20 3 1 #"5"
0 0 23 3 2 #"  "
0 0 20 3 1 #"2"
0 0 23 3 5 #"  )  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 2 #"  "
0 0 20 3 1 #"4"
0 0 23 3 2 #"  "
0 0 20 3 1 #"1"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 2 #"  "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"13"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 2 #"14"
0 0 23 3 5 #")))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"UNITS"
0 0 23 3 2 #" ("
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 14 3 4 #"ROWS"
0 0 23 3 1 #" "
0 0 14 3 4 #"COLS"
0 0 23 3 1 #" "
0 0 14 3 4 #"DIAG"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; ================  "
0 0 23 29 1 #"\n"
0 0 17 3 15 #";; Functions:  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; Board Pos -> true or false  "
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; Produce \316\225 of Q at the given position on board  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"read-square"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"r-c->pos"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #")) "
0 0 14 3 1 #"E"
0 0 23 3 4 #")   "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"read-square"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD2"
0 0 23 3 2 #" ("
0 0 14 3 8 #"r-c->pos"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 3 #")) "
0 0 14 3 1 #"Q"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"read-square"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 8 #"list-ref"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; Board Pos Natural -> Board  "
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; produce new board with E or Q at given position  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fill-square"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD1"
0 0 23 3 2 #" ("
0 0 14 3 8 #"r-c->pos"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 14 3 1 #"Q"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD1"
0 0 23 3 5 #")))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"fill-square"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 7 #"natural"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"append"
0 0 23 3 2 #" ("
0 0 14 3 4 #"take"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 7 #"natural"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 4 #"drop"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 6 #"))))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Board -> Board    "
0 0 23 29 1 #"\n"
0 0 17 3 31 #";; produce a solution for bd   "
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; assume that we know that there is a solution   "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; We do not know any solutions so we can not write any check-expect"
 #"s  "
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";(define (queens bd) BD1) ;stub  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"queens"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" [("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens--bd"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 7 #"solved?"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"                "
0 0 14 3 2 #"bd"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 12 #"queens--lobd"
0 0 23 3 2 #" ("
0 0 14 3 11 #"next-boards"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 6 #"))))  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"queens--lobd"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobd"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 3 #"]  "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" [("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 3 #"try"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens--bd"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobd"
0 0 23 3 6 #")))]  "
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 6 #"false?"
0 0 23 3 1 #" "
0 0 14 3 3 #"try"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 25 #"                         "
0 0 14 3 3 #"try"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 26 #"                         ("
0 0 14 3 12 #"queens--lobd"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobd"
0 0 23 3 10 #"))))]))]  "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"queens--bd"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 5 #")))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Board -> Boolean  "
0 0 23 29 1 #"\n"
0 0 17 3 40 #";; it produces true if board is solved  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"solved?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD1"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"solved?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD2"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"solved?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD3"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"solved?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD4"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 7 #"solved?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD5"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";;(define (solved? bd) false) ;stub  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 7 #"solved?"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #") "
0 0 20 3 1 #"3"
0 0 23 3 4 #")   "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 4 #"true"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 5 #"false"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Board -> Natural  "
0 0 23 29 1 #"\n"
0 0 17 3 50 #";; it produces the number of queens in the board  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD1"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD2"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD3"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD4"
0 0 23 3 2 #") "
0 0 20 3 1 #"2"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD5"
0 0 23 3 2 #") "
0 0 20 3 1 #"4"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 3 #"]  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #") "
0 0 20 3 1 #"1"
0 0 23 3 4 #")   "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 5 #")))  "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 10 #"queens-sum"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 8 #")))]))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; Board -> (listof Board)  "
0 0 23 29 1 #"\n"
0 0 17 3 49 #";; produce list of valid next boards from board  "
0 0 23 29 1 #"\n"
0 0 17 3 75
(
 #";; finds first empty square fills it with Q or E ,keeps only valid b"
 #"oards  "
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 11 #"next-boards"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                      ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 6 #"))))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40 #";(define (next-boards bd) empty) ;stub  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"next-boards"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 1 #">"
0 0 23 3 2 #" ("
0 0 14 3 4 #"last"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #") "
0 0 20 3 2 #"-1"
0 0 23 3 3 #" ) "
0 0 14 3 5 #"empty"
0 0 23 3 3 #"]  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 15 #"keep-only-valid"
0 0 23 3 2 #" ("
0 0 14 3 13 #"fill-with-q-e"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-next"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #") "
0 0 14 3 2 #"bd"
0 0 23 3 8 #" ))]))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; Board -> Pos  "
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; produces the position of the next blank square  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-next"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-next"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 4 #"))) "
0 0 20 3 1 #"1"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-next"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD7"
0 0 23 3 2 #") "
0 0 20 3 1 #"5"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-next"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD8"
0 0 23 3 2 #") "
0 0 20 3 1 #"6"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 34 #";(define (find-next bd) 0) ;stub  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-next"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 4 #" ]  "
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 2 #") "
0 0 20 3 2 #"-1"
0 0 23 3 4 #" )  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 20 3 1 #"0"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 9 #"find-next"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 9 #"))))]))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 32 #";; Pos Board -> (listof Board)  "
0 0 23 29 1 #"\n"
0 0 17 3 52 #";; produce 2 boards with blank filled with E and Q  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 13 #"fill-with-q-e"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"E"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"Q"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 6 #"))))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 45 #"; (define (fill-with-q-e p bd) empty) ;stub  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"fill-with-q-e"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" [("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"build-one"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 11 #"fill-square"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 6 #" ))]  "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 14 3 9 #"build-one"
0 0 23 3 5 #")))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; (listof Board) -> (listof Board)  "
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; produce list containing only valid boards  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 15 #"keep-only-valid"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 7 #")))))) "
0 0 14 3 5 #"empty"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";(define (keep-only-valid lobd) empty) ;stub  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"keep-only-valid"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 4 #"lobd"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 21 #";; Board -> Boolean  "
0 0 23 29 1 #"\n"
0 0 17 3 51 #";; Produce true if board is valid,false otherwise  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD1"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD2"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD3"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD4"
0 0 23 3 2 #") "
0 0 14 3 5 #"false"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD5"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD6"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 3 #"BD7"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #"; (define (valid-board? bd) false) ;stub  "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-board?"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 23 3 3 #" [("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"valid-units?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lou"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 6 #"andmap"
0 0 23 3 1 #" "
0 0 14 3 11 #"valid-unit?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lou"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"valid-unit?"
0 0 23 3 1 #" "
0 0 14 3 1 #"u"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 14 #"no-duplicates?"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 14 #"             ("
0 0 14 3 16 #"keep-only-values"
0 0 23 3 2 #" ("
0 0 14 3 9 #"read-unit"
0 0 23 3 1 #" "
0 0 14 3 1 #"u"
0 0 23 3 6 #"))))  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"read-unit"
0 0 23 3 1 #" "
0 0 14 3 1 #"u"
0 0 23 3 4 #")   "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 8 #"read-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"u"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"read-pos"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 11 #"read-square"
0 0 23 3 1 #" "
0 0 14 3 2 #"bd"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"keep-only-values"
0 0 23 3 1 #" "
0 0 14 3 4 #"lovf"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 23 3 1 #" "
0 0 14 3 4 #"lovf"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 14 #"no-duplicates?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lov"
0 0 23 3 3 #")  "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 23 3 1 #" "
0 0 14 3 3 #"lov"
0 0 23 3 2 #") "
0 0 14 3 4 #"true"
0 0 23 3 3 #"]  "
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ["
0 0 14 3 4 #"else"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 2 #" ("
0 0 14 3 5 #"first"
0 0 23 3 1 #" "
0 0 14 3 3 #"lov"
0 0 23 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lov"
0 0 23 3 4 #"))  "
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                       "
0 0 14 3 5 #"false"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 14 #"no-duplicates?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 23 3 1 #" "
0 0 14 3 3 #"lov"
0 0 23 3 9 #")))]))]  "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 4 #"    "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 12 #"valid-units?"
0 0 23 3 1 #" "
0 0 14 3 5 #"UNITS"
0 0 23 3 4 #"))) "
0           0
